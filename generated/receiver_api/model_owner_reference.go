/*
SUSE Observability Receiver API

This API documentation page describes the SUSE Observability receiver API.

API version: 5.2.0
Contact: info@stackstate.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package receiver_api

import (
	"encoding/json"
)

// OwnerReference OwnerReference contains enough information to let you identify an owning object. An owning object must be in the same namespace as the dependent, or be cluster-scoped, so there is no namespace field.
type OwnerReference struct {
	// UID of the referent.
	Uid string `json:"uid"`
	// Name of the referent.
	Name string `json:"name"`
	// Kind of the referent.
	Kind string `json:"kind"`
	// If true, AND if the owner has the 'foregroundDeletion' finalizer, then the owner cannot be deleted from the key-value store until this reference is removed.
	BlockOwnerDeletion *bool `json:"blockOwnerDeletion,omitempty"`
	// If true, this reference points to the managing controller.
	Controller *bool `json:"controller,omitempty"`
}

// NewOwnerReference instantiates a new OwnerReference object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOwnerReference(uid string, name string, kind string) *OwnerReference {
	this := OwnerReference{}
	this.Uid = uid
	this.Name = name
	this.Kind = kind
	return &this
}

// NewOwnerReferenceWithDefaults instantiates a new OwnerReference object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOwnerReferenceWithDefaults() *OwnerReference {
	this := OwnerReference{}
	return &this
}

// GetUid returns the Uid field value
func (o *OwnerReference) GetUid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Uid
}

// GetUidOk returns a tuple with the Uid field value
// and a boolean to check if the value has been set.
func (o *OwnerReference) GetUidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Uid, true
}

// SetUid sets field value
func (o *OwnerReference) SetUid(v string) {
	o.Uid = v
}

// GetName returns the Name field value
func (o *OwnerReference) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *OwnerReference) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *OwnerReference) SetName(v string) {
	o.Name = v
}

// GetKind returns the Kind field value
func (o *OwnerReference) GetKind() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Kind
}

// GetKindOk returns a tuple with the Kind field value
// and a boolean to check if the value has been set.
func (o *OwnerReference) GetKindOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Kind, true
}

// SetKind sets field value
func (o *OwnerReference) SetKind(v string) {
	o.Kind = v
}

// GetBlockOwnerDeletion returns the BlockOwnerDeletion field value if set, zero value otherwise.
func (o *OwnerReference) GetBlockOwnerDeletion() bool {
	if o == nil || o.BlockOwnerDeletion == nil {
		var ret bool
		return ret
	}
	return *o.BlockOwnerDeletion
}

// GetBlockOwnerDeletionOk returns a tuple with the BlockOwnerDeletion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OwnerReference) GetBlockOwnerDeletionOk() (*bool, bool) {
	if o == nil || o.BlockOwnerDeletion == nil {
		return nil, false
	}
	return o.BlockOwnerDeletion, true
}

// HasBlockOwnerDeletion returns a boolean if a field has been set.
func (o *OwnerReference) HasBlockOwnerDeletion() bool {
	if o != nil && o.BlockOwnerDeletion != nil {
		return true
	}

	return false
}

// SetBlockOwnerDeletion gets a reference to the given bool and assigns it to the BlockOwnerDeletion field.
func (o *OwnerReference) SetBlockOwnerDeletion(v bool) {
	o.BlockOwnerDeletion = &v
}

// GetController returns the Controller field value if set, zero value otherwise.
func (o *OwnerReference) GetController() bool {
	if o == nil || o.Controller == nil {
		var ret bool
		return ret
	}
	return *o.Controller
}

// GetControllerOk returns a tuple with the Controller field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OwnerReference) GetControllerOk() (*bool, bool) {
	if o == nil || o.Controller == nil {
		return nil, false
	}
	return o.Controller, true
}

// HasController returns a boolean if a field has been set.
func (o *OwnerReference) HasController() bool {
	if o != nil && o.Controller != nil {
		return true
	}

	return false
}

// SetController gets a reference to the given bool and assigns it to the Controller field.
func (o *OwnerReference) SetController(v bool) {
	o.Controller = &v
}

func (o OwnerReference) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["uid"] = o.Uid
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["kind"] = o.Kind
	}
	if o.BlockOwnerDeletion != nil {
		toSerialize["blockOwnerDeletion"] = o.BlockOwnerDeletion
	}
	if o.Controller != nil {
		toSerialize["controller"] = o.Controller
	}
	return json.Marshal(toSerialize)
}

type NullableOwnerReference struct {
	value *OwnerReference
	isSet bool
}

func (v NullableOwnerReference) Get() *OwnerReference {
	return v.value
}

func (v *NullableOwnerReference) Set(val *OwnerReference) {
	v.value = val
	v.isSet = true
}

func (v NullableOwnerReference) IsSet() bool {
	return v.isSet
}

func (v *NullableOwnerReference) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOwnerReference(val *OwnerReference) *NullableOwnerReference {
	return &NullableOwnerReference{value: val, isSet: true}
}

func (v NullableOwnerReference) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOwnerReference) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

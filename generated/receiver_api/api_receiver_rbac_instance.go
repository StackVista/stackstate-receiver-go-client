/*
SUSE Observability Receiver API

This API documentation page describes the SUSE Observability receiver API.

API version: 5.2.0
Contact: info@stackstate.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package receiver_api

import (
	"bytes"
	"context"
	"fmt"
	"io/ioutil"
	"net/http"
	"net/url"
)

type ReceiverRbacInstanceAPI interface {

	/*
		IngestInstanceRBAC Create instance RBAC objects

		Ingest RBAC data snapshots to build a scoped authorization model for data access for the server API

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return ApiIngestInstanceRBACRequest
	*/
	IngestInstanceRBAC(ctx context.Context) ApiIngestInstanceRBACRequest

	// IngestInstanceRBACExecute executes the request
	IngestInstanceRBACExecute(r ApiIngestInstanceRBACRequest) (*http.Response, error)
}

// ReceiverRbacInstanceAPIService ReceiverRbacInstanceAPI service
type ReceiverRbacInstanceAPIService service

type ApiIngestInstanceRBACRequest struct {
	ctx         context.Context
	ApiService  ReceiverRbacInstanceAPI
	rBACRequest *RBACRequest
}

func (r ApiIngestInstanceRBACRequest) RBACRequest(rBACRequest RBACRequest) ApiIngestInstanceRBACRequest {
	r.rBACRequest = &rBACRequest
	return r
}

func (r ApiIngestInstanceRBACRequest) Execute() (*http.Response, error) {
	return r.ApiService.IngestInstanceRBACExecute(r)
}

/*
IngestInstanceRBAC Create instance RBAC objects

Ingest RBAC data snapshots to build a scoped authorization model for data access for the server API

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiIngestInstanceRBACRequest
*/
func (a *ReceiverRbacInstanceAPIService) IngestInstanceRBAC(ctx context.Context) ApiIngestInstanceRBACRequest {
	return ApiIngestInstanceRBACRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *ReceiverRbacInstanceAPIService) IngestInstanceRBACExecute(r ApiIngestInstanceRBACRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPost
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReceiverRbacInstanceAPIService.IngestInstanceRBAC")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/stsAgent/rbac/instance"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.rBACRequest == nil {
		return nil, reportError("rBACRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/plain"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.rBACRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v RBACResponseError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = fmt.Errorf(
					"error decoding response with code 400 and body: '%s'. error: %w",
					string(localVarBody), err).Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = fmt.Errorf(
					"error decoding response with code 500 and body: '%s'. error: %w",
					string(localVarBody), err).Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

// ---------------------------------------------
// ------------------ MOCKS --------------------
// ---------------------------------------------

type ReceiverRbacInstanceAPIMock struct {
	IngestInstanceRBACCalls    *[]IngestInstanceRBACCall
	IngestInstanceRBACResponse IngestInstanceRBACMockResponse
}

func NewReceiverRbacInstanceAPIMock() ReceiverRbacInstanceAPIMock {
	xIngestInstanceRBACCalls := make([]IngestInstanceRBACCall, 0)
	return ReceiverRbacInstanceAPIMock{
		IngestInstanceRBACCalls: &xIngestInstanceRBACCalls,
	}
}

type IngestInstanceRBACMockResponse struct {
	Response *http.Response
	Error    error
}

type IngestInstanceRBACCall struct {
	PrBACRequest *RBACRequest
}

func (mock ReceiverRbacInstanceAPIMock) IngestInstanceRBAC(ctx context.Context) ApiIngestInstanceRBACRequest {
	return ApiIngestInstanceRBACRequest{
		ApiService: mock,
		ctx:        ctx,
	}
}

func (mock ReceiverRbacInstanceAPIMock) IngestInstanceRBACExecute(r ApiIngestInstanceRBACRequest) (*http.Response, error) {
	p := IngestInstanceRBACCall{
		PrBACRequest: r.rBACRequest,
	}
	*mock.IngestInstanceRBACCalls = append(*mock.IngestInstanceRBACCalls, p)
	return mock.IngestInstanceRBACResponse.Response, mock.IngestInstanceRBACResponse.Error
}

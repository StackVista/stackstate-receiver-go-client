/*
SUSE Observability Receiver API

This API documentation page describes the SUSE Observability receiver API.

API version: 5.2.0
Contact: info@stackstate.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package receiver_api

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
)

type ReceiverRbacScopeAPI interface {

	/*
		IngestScopeRBAC Create scope RBAC objects

		Ingest RBAC data snapshots to build a scoped authorization model for data access for the server API

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return ApiIngestScopeRBACRequest
	*/
	IngestScopeRBAC(ctx context.Context) ApiIngestScopeRBACRequest

	// IngestScopeRBACExecute executes the request
	IngestScopeRBACExecute(r ApiIngestScopeRBACRequest) (*http.Response, error)
}

// ReceiverRbacScopeAPIService ReceiverRbacScopeAPI service
type ReceiverRbacScopeAPIService service

type ApiIngestScopeRBACRequest struct {
	ctx         context.Context
	ApiService  ReceiverRbacScopeAPI
	rBACRequest *RBACRequest
}

func (r ApiIngestScopeRBACRequest) RBACRequest(rBACRequest RBACRequest) ApiIngestScopeRBACRequest {
	r.rBACRequest = &rBACRequest
	return r
}

func (r ApiIngestScopeRBACRequest) Execute() (*http.Response, error) {
	return r.ApiService.IngestScopeRBACExecute(r)
}

/*
IngestScopeRBAC Create scope RBAC objects

Ingest RBAC data snapshots to build a scoped authorization model for data access for the server API

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiIngestScopeRBACRequest
*/
func (a *ReceiverRbacScopeAPIService) IngestScopeRBAC(ctx context.Context) ApiIngestScopeRBACRequest {
	return ApiIngestScopeRBACRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *ReceiverRbacScopeAPIService) IngestScopeRBACExecute(r ApiIngestScopeRBACRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPost
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReceiverRbacScopeAPIService.IngestScopeRBAC")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/stsAgent/rbac/scope"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.rBACRequest == nil {
		return nil, reportError("rBACRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.rBACRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v GenericErrorsResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

// ---------------------------------------------
// ------------------ MOCKS --------------------
// ---------------------------------------------

type ReceiverRbacScopeAPIMock struct {
	IngestScopeRBACCalls    *[]IngestScopeRBACCall
	IngestScopeRBACResponse IngestScopeRBACMockResponse
}

func NewReceiverRbacScopeAPIMock() ReceiverRbacScopeAPIMock {
	xIngestScopeRBACCalls := make([]IngestScopeRBACCall, 0)
	return ReceiverRbacScopeAPIMock{
		IngestScopeRBACCalls: &xIngestScopeRBACCalls,
	}
}

type IngestScopeRBACMockResponse struct {
	Response *http.Response
	Error    error
}

type IngestScopeRBACCall struct {
	PrBACRequest *RBACRequest
}

func (mock ReceiverRbacScopeAPIMock) IngestScopeRBAC(ctx context.Context) ApiIngestScopeRBACRequest {
	return ApiIngestScopeRBACRequest{
		ApiService: mock,
		ctx:        ctx,
	}
}

func (mock ReceiverRbacScopeAPIMock) IngestScopeRBACExecute(r ApiIngestScopeRBACRequest) (*http.Response, error) {
	p := IngestScopeRBACCall{
		PrBACRequest: r.rBACRequest,
	}
	*mock.IngestScopeRBACCalls = append(*mock.IngestScopeRBACCalls, p)
	return mock.IngestScopeRBACResponse.Response, mock.IngestScopeRBACResponse.Error
}

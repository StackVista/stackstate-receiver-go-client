/*
SUSE Observability Receiver API

This API documentation page describes the SUSE Observability receiver API.

API version: 5.2.0
Contact: info@stackstate.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package receiver_api

import (
	"encoding/json"
)

// CreateRbacData Defines a RBAC resource that needs to be created
type CreateRbacData struct {
	Type     string   `json:"_type"`
	Resource RbacData `json:"resource"`
}

// NewCreateRbacData instantiates a new CreateRbacData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateRbacData(type_ string, resource RbacData) *CreateRbacData {
	this := CreateRbacData{}
	this.Type = type_
	this.Resource = resource
	return &this
}

// NewCreateRbacDataWithDefaults instantiates a new CreateRbacData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateRbacDataWithDefaults() *CreateRbacData {
	this := CreateRbacData{}
	return &this
}

// GetType returns the Type field value
func (o *CreateRbacData) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *CreateRbacData) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *CreateRbacData) SetType(v string) {
	o.Type = v
}

// GetResource returns the Resource field value
func (o *CreateRbacData) GetResource() RbacData {
	if o == nil {
		var ret RbacData
		return ret
	}

	return o.Resource
}

// GetResourceOk returns a tuple with the Resource field value
// and a boolean to check if the value has been set.
func (o *CreateRbacData) GetResourceOk() (*RbacData, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Resource, true
}

// SetResource sets field value
func (o *CreateRbacData) SetResource(v RbacData) {
	o.Resource = v
}

func (o CreateRbacData) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["_type"] = o.Type
	}
	if true {
		toSerialize["resource"] = o.Resource
	}
	return json.Marshal(toSerialize)
}

type NullableCreateRbacData struct {
	value *CreateRbacData
	isSet bool
}

func (v NullableCreateRbacData) Get() *CreateRbacData {
	return v.value
}

func (v *NullableCreateRbacData) Set(val *CreateRbacData) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateRbacData) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateRbacData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateRbacData(val *CreateRbacData) *NullableCreateRbacData {
	return &NullableCreateRbacData{value: val, isSet: true}
}

func (v NullableCreateRbacData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateRbacData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

/*
SUSE Observability Receiver API

This API documentation page describes the SUSE Observability receiver API.

API version: 5.2.0
Contact: info@stackstate.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package receiver_api

import (
	"encoding/json"
	"fmt"
)

// RbacData - struct for RbacData
type RbacData struct {
	ClusterRole        *ClusterRole
	ClusterRoleBinding *ClusterRoleBinding
	Role               *Role
	RoleBinding        *RoleBinding
}

// ClusterRoleAsRbacData is a convenience function that returns ClusterRole wrapped in RbacData
func ClusterRoleAsRbacData(v *ClusterRole) RbacData {
	return RbacData{
		ClusterRole: v,
	}
}

// ClusterRoleBindingAsRbacData is a convenience function that returns ClusterRoleBinding wrapped in RbacData
func ClusterRoleBindingAsRbacData(v *ClusterRoleBinding) RbacData {
	return RbacData{
		ClusterRoleBinding: v,
	}
}

// RoleAsRbacData is a convenience function that returns Role wrapped in RbacData
func RoleAsRbacData(v *Role) RbacData {
	return RbacData{
		Role: v,
	}
}

// RoleBindingAsRbacData is a convenience function that returns RoleBinding wrapped in RbacData
func RoleBindingAsRbacData(v *RoleBinding) RbacData {
	return RbacData{
		RoleBinding: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *RbacData) UnmarshalJSON(data []byte) error {
	var err error
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err = newStrictDecoder(data).Decode(&jsonDict)
	if err != nil {
		return fmt.Errorf("Failed to unmarshal JSON into map for the discriminator lookup.")
	}

	// check if the discriminator value is 'ClusterRole'
	if jsonDict["kind"] == "ClusterRole" {
		// try to unmarshal JSON data into ClusterRole
		err = json.Unmarshal(data, &dst.ClusterRole)
		if err == nil {
			return nil // data stored in dst.ClusterRole, return on the first match
		} else {
			dst.ClusterRole = nil
			return fmt.Errorf("Failed to unmarshal RbacData as ClusterRole: %s", err.Error())
		}
	}

	// check if the discriminator value is 'ClusterRoleBinding'
	if jsonDict["kind"] == "ClusterRoleBinding" {
		// try to unmarshal JSON data into ClusterRoleBinding
		err = json.Unmarshal(data, &dst.ClusterRoleBinding)
		if err == nil {
			return nil // data stored in dst.ClusterRoleBinding, return on the first match
		} else {
			dst.ClusterRoleBinding = nil
			return fmt.Errorf("Failed to unmarshal RbacData as ClusterRoleBinding: %s", err.Error())
		}
	}

	// check if the discriminator value is 'Role'
	if jsonDict["kind"] == "Role" {
		// try to unmarshal JSON data into Role
		err = json.Unmarshal(data, &dst.Role)
		if err == nil {
			return nil // data stored in dst.Role, return on the first match
		} else {
			dst.Role = nil
			return fmt.Errorf("Failed to unmarshal RbacData as Role: %s", err.Error())
		}
	}

	// check if the discriminator value is 'RoleBinding'
	if jsonDict["kind"] == "RoleBinding" {
		// try to unmarshal JSON data into RoleBinding
		err = json.Unmarshal(data, &dst.RoleBinding)
		if err == nil {
			return nil // data stored in dst.RoleBinding, return on the first match
		} else {
			dst.RoleBinding = nil
			return fmt.Errorf("Failed to unmarshal RbacData as RoleBinding: %s", err.Error())
		}
	}

	return nil
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src RbacData) MarshalJSON() ([]byte, error) {
	if src.ClusterRole != nil {
		return json.Marshal(&src.ClusterRole)
	}

	if src.ClusterRoleBinding != nil {
		return json.Marshal(&src.ClusterRoleBinding)
	}

	if src.Role != nil {
		return json.Marshal(&src.Role)
	}

	if src.RoleBinding != nil {
		return json.Marshal(&src.RoleBinding)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *RbacData) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ClusterRole != nil {
		return obj.ClusterRole
	}

	if obj.ClusterRoleBinding != nil {
		return obj.ClusterRoleBinding
	}

	if obj.Role != nil {
		return obj.Role
	}

	if obj.RoleBinding != nil {
		return obj.RoleBinding
	}

	// all schemas are nil
	return nil
}

type NullableRbacData struct {
	value *RbacData
	isSet bool
}

func (v NullableRbacData) Get() *RbacData {
	return v.value
}

func (v *NullableRbacData) Set(val *RbacData) {
	v.value = val
	v.isSet = true
}

func (v NullableRbacData) IsSet() bool {
	return v.isSet
}

func (v *NullableRbacData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRbacData(val *RbacData) *NullableRbacData {
	return &NullableRbacData{value: val, isSet: true}
}

func (v NullableRbacData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRbacData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

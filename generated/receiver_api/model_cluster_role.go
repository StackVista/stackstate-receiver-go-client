/*
SUSE Observability Receiver API

This API documentation page describes the SUSE Observability receiver API.

API version: 5.2.0
Contact: info@stackstate.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package receiver_api

import (
	"encoding/json"
)

// ClusterRole ClusterRole is a cluster level, logical grouping of PolicyRules that can be referenced as a unit by a RoleBinding or ClusterRoleBinding.
type ClusterRole struct {
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated.
	Kind            string           `json:"kind"`
	Metadata        ObjectMeta       `json:"metadata"`
	AggregationRule *AggregationRule `json:"aggregationRule,omitempty"`
	// Rules holds all the PolicyRules for this ClusterRole.
	Rules []PolicyRule `json:"rules,omitempty"`
}

// NewClusterRole instantiates a new ClusterRole object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewClusterRole(kind string, metadata ObjectMeta) *ClusterRole {
	this := ClusterRole{}
	this.Kind = kind
	this.Metadata = metadata
	return &this
}

// NewClusterRoleWithDefaults instantiates a new ClusterRole object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewClusterRoleWithDefaults() *ClusterRole {
	this := ClusterRole{}
	return &this
}

// GetKind returns the Kind field value
func (o *ClusterRole) GetKind() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Kind
}

// GetKindOk returns a tuple with the Kind field value
// and a boolean to check if the value has been set.
func (o *ClusterRole) GetKindOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Kind, true
}

// SetKind sets field value
func (o *ClusterRole) SetKind(v string) {
	o.Kind = v
}

// GetMetadata returns the Metadata field value
func (o *ClusterRole) GetMetadata() ObjectMeta {
	if o == nil {
		var ret ObjectMeta
		return ret
	}

	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value
// and a boolean to check if the value has been set.
func (o *ClusterRole) GetMetadataOk() (*ObjectMeta, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Metadata, true
}

// SetMetadata sets field value
func (o *ClusterRole) SetMetadata(v ObjectMeta) {
	o.Metadata = v
}

// GetAggregationRule returns the AggregationRule field value if set, zero value otherwise.
func (o *ClusterRole) GetAggregationRule() AggregationRule {
	if o == nil || o.AggregationRule == nil {
		var ret AggregationRule
		return ret
	}
	return *o.AggregationRule
}

// GetAggregationRuleOk returns a tuple with the AggregationRule field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterRole) GetAggregationRuleOk() (*AggregationRule, bool) {
	if o == nil || o.AggregationRule == nil {
		return nil, false
	}
	return o.AggregationRule, true
}

// HasAggregationRule returns a boolean if a field has been set.
func (o *ClusterRole) HasAggregationRule() bool {
	if o != nil && o.AggregationRule != nil {
		return true
	}

	return false
}

// SetAggregationRule gets a reference to the given AggregationRule and assigns it to the AggregationRule field.
func (o *ClusterRole) SetAggregationRule(v AggregationRule) {
	o.AggregationRule = &v
}

// GetRules returns the Rules field value if set, zero value otherwise.
func (o *ClusterRole) GetRules() []PolicyRule {
	if o == nil || o.Rules == nil {
		var ret []PolicyRule
		return ret
	}
	return o.Rules
}

// GetRulesOk returns a tuple with the Rules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterRole) GetRulesOk() ([]PolicyRule, bool) {
	if o == nil || o.Rules == nil {
		return nil, false
	}
	return o.Rules, true
}

// HasRules returns a boolean if a field has been set.
func (o *ClusterRole) HasRules() bool {
	if o != nil && o.Rules != nil {
		return true
	}

	return false
}

// SetRules gets a reference to the given []PolicyRule and assigns it to the Rules field.
func (o *ClusterRole) SetRules(v []PolicyRule) {
	o.Rules = v
}

func (o ClusterRole) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["kind"] = o.Kind
	}
	if true {
		toSerialize["metadata"] = o.Metadata
	}
	if o.AggregationRule != nil {
		toSerialize["aggregationRule"] = o.AggregationRule
	}
	if o.Rules != nil {
		toSerialize["rules"] = o.Rules
	}
	return json.Marshal(toSerialize)
}

type NullableClusterRole struct {
	value *ClusterRole
	isSet bool
}

func (v NullableClusterRole) Get() *ClusterRole {
	return v.value
}

func (v *NullableClusterRole) Set(val *ClusterRole) {
	v.value = val
	v.isSet = true
}

func (v NullableClusterRole) IsSet() bool {
	return v.isSet
}

func (v *NullableClusterRole) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClusterRole(val *ClusterRole) *NullableClusterRole {
	return &NullableClusterRole{value: val, isSet: true}
}

func (v NullableClusterRole) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClusterRole) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

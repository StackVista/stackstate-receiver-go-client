/*
SUSE Observability Receiver API

This API documentation page describes the SUSE Observability receiver API.

API version: 5.2.0
Contact: info@stackstate.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package receiver_api

import (
	"encoding/json"
)

// LabelSelector A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
type LabelSelector struct {
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions []LabelSelectorRequirement `json:"matchExpressions,omitempty"`
	// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is 'key', the operator is 'In', and the values array contains only 'value'. The requirements are ANDed.
	MatchLabels *map[string]string `json:"matchLabels,omitempty"`
}

// NewLabelSelector instantiates a new LabelSelector object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLabelSelector() *LabelSelector {
	this := LabelSelector{}
	return &this
}

// NewLabelSelectorWithDefaults instantiates a new LabelSelector object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLabelSelectorWithDefaults() *LabelSelector {
	this := LabelSelector{}
	return &this
}

// GetMatchExpressions returns the MatchExpressions field value if set, zero value otherwise.
func (o *LabelSelector) GetMatchExpressions() []LabelSelectorRequirement {
	if o == nil || o.MatchExpressions == nil {
		var ret []LabelSelectorRequirement
		return ret
	}
	return o.MatchExpressions
}

// GetMatchExpressionsOk returns a tuple with the MatchExpressions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LabelSelector) GetMatchExpressionsOk() ([]LabelSelectorRequirement, bool) {
	if o == nil || o.MatchExpressions == nil {
		return nil, false
	}
	return o.MatchExpressions, true
}

// HasMatchExpressions returns a boolean if a field has been set.
func (o *LabelSelector) HasMatchExpressions() bool {
	if o != nil && o.MatchExpressions != nil {
		return true
	}

	return false
}

// SetMatchExpressions gets a reference to the given []LabelSelectorRequirement and assigns it to the MatchExpressions field.
func (o *LabelSelector) SetMatchExpressions(v []LabelSelectorRequirement) {
	o.MatchExpressions = v
}

// GetMatchLabels returns the MatchLabels field value if set, zero value otherwise.
func (o *LabelSelector) GetMatchLabels() map[string]string {
	if o == nil || o.MatchLabels == nil {
		var ret map[string]string
		return ret
	}
	return *o.MatchLabels
}

// GetMatchLabelsOk returns a tuple with the MatchLabels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LabelSelector) GetMatchLabelsOk() (*map[string]string, bool) {
	if o == nil || o.MatchLabels == nil {
		return nil, false
	}
	return o.MatchLabels, true
}

// HasMatchLabels returns a boolean if a field has been set.
func (o *LabelSelector) HasMatchLabels() bool {
	if o != nil && o.MatchLabels != nil {
		return true
	}

	return false
}

// SetMatchLabels gets a reference to the given map[string]string and assigns it to the MatchLabels field.
func (o *LabelSelector) SetMatchLabels(v map[string]string) {
	o.MatchLabels = &v
}

func (o LabelSelector) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.MatchExpressions != nil {
		toSerialize["matchExpressions"] = o.MatchExpressions
	}
	if o.MatchLabels != nil {
		toSerialize["matchLabels"] = o.MatchLabels
	}
	return json.Marshal(toSerialize)
}

type NullableLabelSelector struct {
	value *LabelSelector
	isSet bool
}

func (v NullableLabelSelector) Get() *LabelSelector {
	return v.value
}

func (v *NullableLabelSelector) Set(val *LabelSelector) {
	v.value = val
	v.isSet = true
}

func (v NullableLabelSelector) IsSet() bool {
	return v.isSet
}

func (v *NullableLabelSelector) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLabelSelector(val *LabelSelector) *NullableLabelSelector {
	return &NullableLabelSelector{value: val, isSet: true}
}

func (v NullableLabelSelector) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLabelSelector) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

/*
SUSE Observability Receiver API

This API documentation page describes the SUSE Observability receiver API.

API version: 5.2.0
Contact: info@stackstate.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package receiver_api

import (
	"encoding/json"
	"fmt"
)

// RBACRequest - RBACRequest holds the data needed to create or update RBAC objects
type RBACRequest struct {
	RBACIncrementRequest *RBACIncrementRequest
	RBACSnapshotRequest  *RBACSnapshotRequest
}

// RBACIncrementRequestAsRBACRequest is a convenience function that returns RBACIncrementRequest wrapped in RBACRequest
func RBACIncrementRequestAsRBACRequest(v *RBACIncrementRequest) RBACRequest {
	return RBACRequest{
		RBACIncrementRequest: v,
	}
}

// RBACSnapshotRequestAsRBACRequest is a convenience function that returns RBACSnapshotRequest wrapped in RBACRequest
func RBACSnapshotRequestAsRBACRequest(v *RBACSnapshotRequest) RBACRequest {
	return RBACRequest{
		RBACSnapshotRequest: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *RBACRequest) UnmarshalJSON(data []byte) error {
	var err error
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err = newStrictDecoder(data).Decode(&jsonDict)
	if err != nil {
		return fmt.Errorf("Failed to unmarshal JSON into map for the discriminator lookup.")
	}

	// check if the discriminator value is 'RBACIncrementRequest'
	if jsonDict["_type"] == "RBACIncrementRequest" {
		// try to unmarshal JSON data into RBACIncrementRequest
		err = json.Unmarshal(data, &dst.RBACIncrementRequest)
		if err == nil {
			return nil // data stored in dst.RBACIncrementRequest, return on the first match
		} else {
			dst.RBACIncrementRequest = nil
			return fmt.Errorf("Failed to unmarshal RBACRequest as RBACIncrementRequest: %s", err.Error())
		}
	}

	// check if the discriminator value is 'RBACSnapshotRequest'
	if jsonDict["_type"] == "RBACSnapshotRequest" {
		// try to unmarshal JSON data into RBACSnapshotRequest
		err = json.Unmarshal(data, &dst.RBACSnapshotRequest)
		if err == nil {
			return nil // data stored in dst.RBACSnapshotRequest, return on the first match
		} else {
			dst.RBACSnapshotRequest = nil
			return fmt.Errorf("Failed to unmarshal RBACRequest as RBACSnapshotRequest: %s", err.Error())
		}
	}

	return nil
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src RBACRequest) MarshalJSON() ([]byte, error) {
	if src.RBACIncrementRequest != nil {
		return json.Marshal(&src.RBACIncrementRequest)
	}

	if src.RBACSnapshotRequest != nil {
		return json.Marshal(&src.RBACSnapshotRequest)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *RBACRequest) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.RBACIncrementRequest != nil {
		return obj.RBACIncrementRequest
	}

	if obj.RBACSnapshotRequest != nil {
		return obj.RBACSnapshotRequest
	}

	// all schemas are nil
	return nil
}

type NullableRBACRequest struct {
	value *RBACRequest
	isSet bool
}

func (v NullableRBACRequest) Get() *RBACRequest {
	return v.value
}

func (v *NullableRBACRequest) Set(val *RBACRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableRBACRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableRBACRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRBACRequest(val *RBACRequest) *NullableRBACRequest {
	return &NullableRBACRequest{value: val, isSet: true}
}

func (v NullableRBACRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRBACRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

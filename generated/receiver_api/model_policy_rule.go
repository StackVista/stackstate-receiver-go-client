/*
SUSE Observability Receiver API

This API documentation page describes the SUSE Observability receiver API.

API version: 5.2.0
Contact: info@stackstate.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package receiver_api

import (
	"encoding/json"
)

// PolicyRule PolicyRule holds information that describes a policy rule.
type PolicyRule struct {
	// APIGroups is the name of the APIGroup that contains the resources.
	ApiGroups []string `json:"apiGroups,omitempty"`
	// NonResourceURLs is a set of partial URLs that a user should have access to.
	NonResourceURLs []string `json:"nonResourceURLs,omitempty"`
	// ResourceNames is an optional white list of names that the rule applies to.
	ResourceNames []string `json:"resourceNames,omitempty"`
	// Resources is a list of resources this rule applies to.
	Resources []string `json:"resources,omitempty"`
	// Verbs is a list of Verbs that apply to all ResourceKinds contained in this rule.
	Verbs []string `json:"verbs"`
}

// NewPolicyRule instantiates a new PolicyRule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPolicyRule(verbs []string) *PolicyRule {
	this := PolicyRule{}
	this.Verbs = verbs
	return &this
}

// NewPolicyRuleWithDefaults instantiates a new PolicyRule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPolicyRuleWithDefaults() *PolicyRule {
	this := PolicyRule{}
	return &this
}

// GetApiGroups returns the ApiGroups field value if set, zero value otherwise.
func (o *PolicyRule) GetApiGroups() []string {
	if o == nil || o.ApiGroups == nil {
		var ret []string
		return ret
	}
	return o.ApiGroups
}

// GetApiGroupsOk returns a tuple with the ApiGroups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PolicyRule) GetApiGroupsOk() ([]string, bool) {
	if o == nil || o.ApiGroups == nil {
		return nil, false
	}
	return o.ApiGroups, true
}

// HasApiGroups returns a boolean if a field has been set.
func (o *PolicyRule) HasApiGroups() bool {
	if o != nil && o.ApiGroups != nil {
		return true
	}

	return false
}

// SetApiGroups gets a reference to the given []string and assigns it to the ApiGroups field.
func (o *PolicyRule) SetApiGroups(v []string) {
	o.ApiGroups = v
}

// GetNonResourceURLs returns the NonResourceURLs field value if set, zero value otherwise.
func (o *PolicyRule) GetNonResourceURLs() []string {
	if o == nil || o.NonResourceURLs == nil {
		var ret []string
		return ret
	}
	return o.NonResourceURLs
}

// GetNonResourceURLsOk returns a tuple with the NonResourceURLs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PolicyRule) GetNonResourceURLsOk() ([]string, bool) {
	if o == nil || o.NonResourceURLs == nil {
		return nil, false
	}
	return o.NonResourceURLs, true
}

// HasNonResourceURLs returns a boolean if a field has been set.
func (o *PolicyRule) HasNonResourceURLs() bool {
	if o != nil && o.NonResourceURLs != nil {
		return true
	}

	return false
}

// SetNonResourceURLs gets a reference to the given []string and assigns it to the NonResourceURLs field.
func (o *PolicyRule) SetNonResourceURLs(v []string) {
	o.NonResourceURLs = v
}

// GetResourceNames returns the ResourceNames field value if set, zero value otherwise.
func (o *PolicyRule) GetResourceNames() []string {
	if o == nil || o.ResourceNames == nil {
		var ret []string
		return ret
	}
	return o.ResourceNames
}

// GetResourceNamesOk returns a tuple with the ResourceNames field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PolicyRule) GetResourceNamesOk() ([]string, bool) {
	if o == nil || o.ResourceNames == nil {
		return nil, false
	}
	return o.ResourceNames, true
}

// HasResourceNames returns a boolean if a field has been set.
func (o *PolicyRule) HasResourceNames() bool {
	if o != nil && o.ResourceNames != nil {
		return true
	}

	return false
}

// SetResourceNames gets a reference to the given []string and assigns it to the ResourceNames field.
func (o *PolicyRule) SetResourceNames(v []string) {
	o.ResourceNames = v
}

// GetResources returns the Resources field value if set, zero value otherwise.
func (o *PolicyRule) GetResources() []string {
	if o == nil || o.Resources == nil {
		var ret []string
		return ret
	}
	return o.Resources
}

// GetResourcesOk returns a tuple with the Resources field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PolicyRule) GetResourcesOk() ([]string, bool) {
	if o == nil || o.Resources == nil {
		return nil, false
	}
	return o.Resources, true
}

// HasResources returns a boolean if a field has been set.
func (o *PolicyRule) HasResources() bool {
	if o != nil && o.Resources != nil {
		return true
	}

	return false
}

// SetResources gets a reference to the given []string and assigns it to the Resources field.
func (o *PolicyRule) SetResources(v []string) {
	o.Resources = v
}

// GetVerbs returns the Verbs field value
func (o *PolicyRule) GetVerbs() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Verbs
}

// GetVerbsOk returns a tuple with the Verbs field value
// and a boolean to check if the value has been set.
func (o *PolicyRule) GetVerbsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Verbs, true
}

// SetVerbs sets field value
func (o *PolicyRule) SetVerbs(v []string) {
	o.Verbs = v
}

func (o PolicyRule) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ApiGroups != nil {
		toSerialize["apiGroups"] = o.ApiGroups
	}
	if o.NonResourceURLs != nil {
		toSerialize["nonResourceURLs"] = o.NonResourceURLs
	}
	if o.ResourceNames != nil {
		toSerialize["resourceNames"] = o.ResourceNames
	}
	if o.Resources != nil {
		toSerialize["resources"] = o.Resources
	}
	if true {
		toSerialize["verbs"] = o.Verbs
	}
	return json.Marshal(toSerialize)
}

type NullablePolicyRule struct {
	value *PolicyRule
	isSet bool
}

func (v NullablePolicyRule) Get() *PolicyRule {
	return v.value
}

func (v *NullablePolicyRule) Set(val *PolicyRule) {
	v.value = val
	v.isSet = true
}

func (v NullablePolicyRule) IsSet() bool {
	return v.isSet
}

func (v *NullablePolicyRule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePolicyRule(val *PolicyRule) *NullablePolicyRule {
	return &NullablePolicyRule{value: val, isSet: true}
}

func (v NullablePolicyRule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePolicyRule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

/*
SUSE Observability Receiver API

This API documentation page describes the SUSE Observability receiver API.

API version: 5.2.0
Contact: info@stackstate.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package receiver_api

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
)

type FeaturesAPI interface {

	/*
		GetFeatures Get supported features from the receiver

		Get supported features from the receiver.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return ApiGetFeaturesRequest
	*/
	GetFeatures(ctx context.Context) ApiGetFeaturesRequest

	// GetFeaturesExecute executes the request
	//  @return map[string]interface{}
	GetFeaturesExecute(r ApiGetFeaturesRequest) (map[string]interface{}, *http.Response, error)
}

// FeaturesAPIService FeaturesAPI service
type FeaturesAPIService service

type ApiGetFeaturesRequest struct {
	ctx        context.Context
	ApiService FeaturesAPI
}

func (r ApiGetFeaturesRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.GetFeaturesExecute(r)
}

/*
GetFeatures Get supported features from the receiver

Get supported features from the receiver.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetFeaturesRequest
*/
func (a *FeaturesAPIService) GetFeatures(ctx context.Context) ApiGetFeaturesRequest {
	return ApiGetFeaturesRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return map[string]interface{}
func (a *FeaturesAPIService) GetFeaturesExecute(r ApiGetFeaturesRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FeaturesAPIService.GetFeatures")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/stsAgent/features"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v GenericErrorsResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// ---------------------------------------------
// ------------------ MOCKS --------------------
// ---------------------------------------------

type FeaturesAPIMock struct {
	GetFeaturesCalls    *[]GetFeaturesCall
	GetFeaturesResponse GetFeaturesMockResponse
}

func NewFeaturesAPIMock() FeaturesAPIMock {
	xGetFeaturesCalls := make([]GetFeaturesCall, 0)
	return FeaturesAPIMock{
		GetFeaturesCalls: &xGetFeaturesCalls,
	}
}

type GetFeaturesMockResponse struct {
	Result   map[string]interface{}
	Response *http.Response
	Error    error
}

type GetFeaturesCall struct {
}

func (mock FeaturesAPIMock) GetFeatures(ctx context.Context) ApiGetFeaturesRequest {
	return ApiGetFeaturesRequest{
		ApiService: mock,
		ctx:        ctx,
	}
}

func (mock FeaturesAPIMock) GetFeaturesExecute(r ApiGetFeaturesRequest) (map[string]interface{}, *http.Response, error) {
	p := GetFeaturesCall{}
	*mock.GetFeaturesCalls = append(*mock.GetFeaturesCalls, p)
	return mock.GetFeaturesResponse.Result, mock.GetFeaturesResponse.Response, mock.GetFeaturesResponse.Error
}

/*
SUSE Observability Receiver API

This API documentation page describes the SUSE Observability receiver API.

API version: 5.2.0
Contact: info@stackstate.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package receiver_api

import (
	"encoding/json"
	"time"
)

// ManagedFieldsEntry ManagedFieldsEntry is a workflow-id, a FieldSet and the group version of the resource that the fieldset applies to.
type ManagedFieldsEntry struct {
	// APIVersion defines the version of this resource that this field set applies to. The format is \"group/version\" just like the top-level APIVersion field. It is necessary to track the version of a field set because it cannot be automatically converted.
	ApiVersion *string `json:"apiVersion,omitempty"`
	// FieldsType is the discriminator for the different fields format and version. There is currently only one possible value: \"FieldsV1\"
	FieldsType *string `json:"fieldsType,omitempty"`
	// Manager is an identifier of the workflow managing these fields.
	Manager *string `json:"manager,omitempty"`
	// Operation is the type of operation which lead to this ManagedFieldsEntry being created. The only valid values for this field are 'Apply' and 'Update'.
	Operation *string `json:"operation,omitempty"`
	// Subresource is the name of the subresource used to update that object, or empty string if the object was updated through the main resource. The value of this field is used to distinguish between managers, even if they share the same name. For example, a status update will be distinct from a regular update using the same manager name. Note that the APIVersion field is not related to the Subresource field and it always corresponds to the version of the main resource.
	Subresource *string `json:"subresource,omitempty"`
	// Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.
	Time *time.Time `json:"time,omitempty"`
}

// NewManagedFieldsEntry instantiates a new ManagedFieldsEntry object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewManagedFieldsEntry() *ManagedFieldsEntry {
	this := ManagedFieldsEntry{}
	return &this
}

// NewManagedFieldsEntryWithDefaults instantiates a new ManagedFieldsEntry object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewManagedFieldsEntryWithDefaults() *ManagedFieldsEntry {
	this := ManagedFieldsEntry{}
	return &this
}

// GetApiVersion returns the ApiVersion field value if set, zero value otherwise.
func (o *ManagedFieldsEntry) GetApiVersion() string {
	if o == nil || o.ApiVersion == nil {
		var ret string
		return ret
	}
	return *o.ApiVersion
}

// GetApiVersionOk returns a tuple with the ApiVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagedFieldsEntry) GetApiVersionOk() (*string, bool) {
	if o == nil || o.ApiVersion == nil {
		return nil, false
	}
	return o.ApiVersion, true
}

// HasApiVersion returns a boolean if a field has been set.
func (o *ManagedFieldsEntry) HasApiVersion() bool {
	if o != nil && o.ApiVersion != nil {
		return true
	}

	return false
}

// SetApiVersion gets a reference to the given string and assigns it to the ApiVersion field.
func (o *ManagedFieldsEntry) SetApiVersion(v string) {
	o.ApiVersion = &v
}

// GetFieldsType returns the FieldsType field value if set, zero value otherwise.
func (o *ManagedFieldsEntry) GetFieldsType() string {
	if o == nil || o.FieldsType == nil {
		var ret string
		return ret
	}
	return *o.FieldsType
}

// GetFieldsTypeOk returns a tuple with the FieldsType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagedFieldsEntry) GetFieldsTypeOk() (*string, bool) {
	if o == nil || o.FieldsType == nil {
		return nil, false
	}
	return o.FieldsType, true
}

// HasFieldsType returns a boolean if a field has been set.
func (o *ManagedFieldsEntry) HasFieldsType() bool {
	if o != nil && o.FieldsType != nil {
		return true
	}

	return false
}

// SetFieldsType gets a reference to the given string and assigns it to the FieldsType field.
func (o *ManagedFieldsEntry) SetFieldsType(v string) {
	o.FieldsType = &v
}

// GetManager returns the Manager field value if set, zero value otherwise.
func (o *ManagedFieldsEntry) GetManager() string {
	if o == nil || o.Manager == nil {
		var ret string
		return ret
	}
	return *o.Manager
}

// GetManagerOk returns a tuple with the Manager field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagedFieldsEntry) GetManagerOk() (*string, bool) {
	if o == nil || o.Manager == nil {
		return nil, false
	}
	return o.Manager, true
}

// HasManager returns a boolean if a field has been set.
func (o *ManagedFieldsEntry) HasManager() bool {
	if o != nil && o.Manager != nil {
		return true
	}

	return false
}

// SetManager gets a reference to the given string and assigns it to the Manager field.
func (o *ManagedFieldsEntry) SetManager(v string) {
	o.Manager = &v
}

// GetOperation returns the Operation field value if set, zero value otherwise.
func (o *ManagedFieldsEntry) GetOperation() string {
	if o == nil || o.Operation == nil {
		var ret string
		return ret
	}
	return *o.Operation
}

// GetOperationOk returns a tuple with the Operation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagedFieldsEntry) GetOperationOk() (*string, bool) {
	if o == nil || o.Operation == nil {
		return nil, false
	}
	return o.Operation, true
}

// HasOperation returns a boolean if a field has been set.
func (o *ManagedFieldsEntry) HasOperation() bool {
	if o != nil && o.Operation != nil {
		return true
	}

	return false
}

// SetOperation gets a reference to the given string and assigns it to the Operation field.
func (o *ManagedFieldsEntry) SetOperation(v string) {
	o.Operation = &v
}

// GetSubresource returns the Subresource field value if set, zero value otherwise.
func (o *ManagedFieldsEntry) GetSubresource() string {
	if o == nil || o.Subresource == nil {
		var ret string
		return ret
	}
	return *o.Subresource
}

// GetSubresourceOk returns a tuple with the Subresource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagedFieldsEntry) GetSubresourceOk() (*string, bool) {
	if o == nil || o.Subresource == nil {
		return nil, false
	}
	return o.Subresource, true
}

// HasSubresource returns a boolean if a field has been set.
func (o *ManagedFieldsEntry) HasSubresource() bool {
	if o != nil && o.Subresource != nil {
		return true
	}

	return false
}

// SetSubresource gets a reference to the given string and assigns it to the Subresource field.
func (o *ManagedFieldsEntry) SetSubresource(v string) {
	o.Subresource = &v
}

// GetTime returns the Time field value if set, zero value otherwise.
func (o *ManagedFieldsEntry) GetTime() time.Time {
	if o == nil || o.Time == nil {
		var ret time.Time
		return ret
	}
	return *o.Time
}

// GetTimeOk returns a tuple with the Time field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagedFieldsEntry) GetTimeOk() (*time.Time, bool) {
	if o == nil || o.Time == nil {
		return nil, false
	}
	return o.Time, true
}

// HasTime returns a boolean if a field has been set.
func (o *ManagedFieldsEntry) HasTime() bool {
	if o != nil && o.Time != nil {
		return true
	}

	return false
}

// SetTime gets a reference to the given time.Time and assigns it to the Time field.
func (o *ManagedFieldsEntry) SetTime(v time.Time) {
	o.Time = &v
}

func (o ManagedFieldsEntry) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ApiVersion != nil {
		toSerialize["apiVersion"] = o.ApiVersion
	}
	if o.FieldsType != nil {
		toSerialize["fieldsType"] = o.FieldsType
	}
	if o.Manager != nil {
		toSerialize["manager"] = o.Manager
	}
	if o.Operation != nil {
		toSerialize["operation"] = o.Operation
	}
	if o.Subresource != nil {
		toSerialize["subresource"] = o.Subresource
	}
	if o.Time != nil {
		toSerialize["time"] = o.Time
	}
	return json.Marshal(toSerialize)
}

type NullableManagedFieldsEntry struct {
	value *ManagedFieldsEntry
	isSet bool
}

func (v NullableManagedFieldsEntry) Get() *ManagedFieldsEntry {
	return v.value
}

func (v *NullableManagedFieldsEntry) Set(val *ManagedFieldsEntry) {
	v.value = val
	v.isSet = true
}

func (v NullableManagedFieldsEntry) IsSet() bool {
	return v.isSet
}

func (v *NullableManagedFieldsEntry) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableManagedFieldsEntry(val *ManagedFieldsEntry) *NullableManagedFieldsEntry {
	return &NullableManagedFieldsEntry{value: val, isSet: true}
}

func (v NullableManagedFieldsEntry) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableManagedFieldsEntry) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

/*
SUSE Observability Receiver API

This API documentation page describes the SUSE Observability receiver API.

API version: 5.2.0
Contact: info@stackstate.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package receiver_api

import (
	"encoding/json"
)

// GenericApiError struct for GenericApiError
type GenericApiError struct {
	Type      string `json:"_type"`
	Message   string `json:"message"`
	ErrorCode *int64 `json:"errorCode,omitempty"`
}

// NewGenericApiError instantiates a new GenericApiError object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGenericApiError(type_ string, message string) *GenericApiError {
	this := GenericApiError{}
	this.Type = type_
	this.Message = message
	return &this
}

// NewGenericApiErrorWithDefaults instantiates a new GenericApiError object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGenericApiErrorWithDefaults() *GenericApiError {
	this := GenericApiError{}
	return &this
}

// GetType returns the Type field value
func (o *GenericApiError) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *GenericApiError) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *GenericApiError) SetType(v string) {
	o.Type = v
}

// GetMessage returns the Message field value
func (o *GenericApiError) GetMessage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Message
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
func (o *GenericApiError) GetMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Message, true
}

// SetMessage sets field value
func (o *GenericApiError) SetMessage(v string) {
	o.Message = v
}

// GetErrorCode returns the ErrorCode field value if set, zero value otherwise.
func (o *GenericApiError) GetErrorCode() int64 {
	if o == nil || o.ErrorCode == nil {
		var ret int64
		return ret
	}
	return *o.ErrorCode
}

// GetErrorCodeOk returns a tuple with the ErrorCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GenericApiError) GetErrorCodeOk() (*int64, bool) {
	if o == nil || o.ErrorCode == nil {
		return nil, false
	}
	return o.ErrorCode, true
}

// HasErrorCode returns a boolean if a field has been set.
func (o *GenericApiError) HasErrorCode() bool {
	if o != nil && o.ErrorCode != nil {
		return true
	}

	return false
}

// SetErrorCode gets a reference to the given int64 and assigns it to the ErrorCode field.
func (o *GenericApiError) SetErrorCode(v int64) {
	o.ErrorCode = &v
}

func (o GenericApiError) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["_type"] = o.Type
	}
	if true {
		toSerialize["message"] = o.Message
	}
	if o.ErrorCode != nil {
		toSerialize["errorCode"] = o.ErrorCode
	}
	return json.Marshal(toSerialize)
}

type NullableGenericApiError struct {
	value *GenericApiError
	isSet bool
}

func (v NullableGenericApiError) Get() *GenericApiError {
	return v.value
}

func (v *NullableGenericApiError) Set(val *GenericApiError) {
	v.value = val
	v.isSet = true
}

func (v NullableGenericApiError) IsSet() bool {
	return v.isSet
}

func (v *NullableGenericApiError) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGenericApiError(val *GenericApiError) *NullableGenericApiError {
	return &NullableGenericApiError{value: val, isSet: true}
}

func (v NullableGenericApiError) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGenericApiError) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

/*
SUSE Observability Receiver API

This API documentation page describes the SUSE Observability receiver API.

API version: 5.2.0
Contact: info@stackstate.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package receiver_api

import (
	"encoding/json"
)

// AggregationRule AggregationRule describes how to locate ClusterRoles to aggregate into the ClusterRole.
type AggregationRule struct {
	// ClusterRoleSelectors holds a list of selectors which will be used to find ClusterRoles and create the rules. If any of the selectors match, then the ClusterRole's permissions will be added.
	ClusterRoleSelectors []LabelSelector `json:"clusterRoleSelectors,omitempty"`
}

// NewAggregationRule instantiates a new AggregationRule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAggregationRule() *AggregationRule {
	this := AggregationRule{}
	return &this
}

// NewAggregationRuleWithDefaults instantiates a new AggregationRule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAggregationRuleWithDefaults() *AggregationRule {
	this := AggregationRule{}
	return &this
}

// GetClusterRoleSelectors returns the ClusterRoleSelectors field value if set, zero value otherwise.
func (o *AggregationRule) GetClusterRoleSelectors() []LabelSelector {
	if o == nil || o.ClusterRoleSelectors == nil {
		var ret []LabelSelector
		return ret
	}
	return o.ClusterRoleSelectors
}

// GetClusterRoleSelectorsOk returns a tuple with the ClusterRoleSelectors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AggregationRule) GetClusterRoleSelectorsOk() ([]LabelSelector, bool) {
	if o == nil || o.ClusterRoleSelectors == nil {
		return nil, false
	}
	return o.ClusterRoleSelectors, true
}

// HasClusterRoleSelectors returns a boolean if a field has been set.
func (o *AggregationRule) HasClusterRoleSelectors() bool {
	if o != nil && o.ClusterRoleSelectors != nil {
		return true
	}

	return false
}

// SetClusterRoleSelectors gets a reference to the given []LabelSelector and assigns it to the ClusterRoleSelectors field.
func (o *AggregationRule) SetClusterRoleSelectors(v []LabelSelector) {
	o.ClusterRoleSelectors = v
}

func (o AggregationRule) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ClusterRoleSelectors != nil {
		toSerialize["clusterRoleSelectors"] = o.ClusterRoleSelectors
	}
	return json.Marshal(toSerialize)
}

type NullableAggregationRule struct {
	value *AggregationRule
	isSet bool
}

func (v NullableAggregationRule) Get() *AggregationRule {
	return v.value
}

func (v *NullableAggregationRule) Set(val *AggregationRule) {
	v.value = val
	v.isSet = true
}

func (v NullableAggregationRule) IsSet() bool {
	return v.isSet
}

func (v *NullableAggregationRule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAggregationRule(val *AggregationRule) *NullableAggregationRule {
	return &NullableAggregationRule{value: val, isSet: true}
}

func (v NullableAggregationRule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAggregationRule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

/*
SUSE Observability Receiver API

This API documentation page describes the SUSE Observability receiver API.

API version: 5.2.0
Contact: info@stackstate.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package receiver_api

import (
	"encoding/json"
)

// RBACIncrementRequest CreateInstanceRBACRequest holds the a snapshot of data or individual updates or RBAC data
type RBACIncrementRequest struct {
	Type string `json:"_type"`
	// Timestamp where the data was collected by the RBAC Agent
	CollectionTimestamp int64 `json:"collection_timestamp"`
	// Cluster name which identifies the scope of the RBAC data
	Cluster string            `json:"cluster"`
	Changes []RbacDataChanges `json:"changes"`
}

// NewRBACIncrementRequest instantiates a new RBACIncrementRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRBACIncrementRequest(type_ string, collectionTimestamp int64, cluster string, changes []RbacDataChanges) *RBACIncrementRequest {
	this := RBACIncrementRequest{}
	this.Type = type_
	this.CollectionTimestamp = collectionTimestamp
	this.Cluster = cluster
	this.Changes = changes
	return &this
}

// NewRBACIncrementRequestWithDefaults instantiates a new RBACIncrementRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRBACIncrementRequestWithDefaults() *RBACIncrementRequest {
	this := RBACIncrementRequest{}
	return &this
}

// GetType returns the Type field value
func (o *RBACIncrementRequest) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *RBACIncrementRequest) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *RBACIncrementRequest) SetType(v string) {
	o.Type = v
}

// GetCollectionTimestamp returns the CollectionTimestamp field value
func (o *RBACIncrementRequest) GetCollectionTimestamp() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.CollectionTimestamp
}

// GetCollectionTimestampOk returns a tuple with the CollectionTimestamp field value
// and a boolean to check if the value has been set.
func (o *RBACIncrementRequest) GetCollectionTimestampOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CollectionTimestamp, true
}

// SetCollectionTimestamp sets field value
func (o *RBACIncrementRequest) SetCollectionTimestamp(v int64) {
	o.CollectionTimestamp = v
}

// GetCluster returns the Cluster field value
func (o *RBACIncrementRequest) GetCluster() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Cluster
}

// GetClusterOk returns a tuple with the Cluster field value
// and a boolean to check if the value has been set.
func (o *RBACIncrementRequest) GetClusterOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Cluster, true
}

// SetCluster sets field value
func (o *RBACIncrementRequest) SetCluster(v string) {
	o.Cluster = v
}

// GetChanges returns the Changes field value
func (o *RBACIncrementRequest) GetChanges() []RbacDataChanges {
	if o == nil {
		var ret []RbacDataChanges
		return ret
	}

	return o.Changes
}

// GetChangesOk returns a tuple with the Changes field value
// and a boolean to check if the value has been set.
func (o *RBACIncrementRequest) GetChangesOk() ([]RbacDataChanges, bool) {
	if o == nil {
		return nil, false
	}
	return o.Changes, true
}

// SetChanges sets field value
func (o *RBACIncrementRequest) SetChanges(v []RbacDataChanges) {
	o.Changes = v
}

func (o RBACIncrementRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["_type"] = o.Type
	}
	if true {
		toSerialize["collection_timestamp"] = o.CollectionTimestamp
	}
	if true {
		toSerialize["cluster"] = o.Cluster
	}
	if true {
		toSerialize["changes"] = o.Changes
	}
	return json.Marshal(toSerialize)
}

type NullableRBACIncrementRequest struct {
	value *RBACIncrementRequest
	isSet bool
}

func (v NullableRBACIncrementRequest) Get() *RBACIncrementRequest {
	return v.value
}

func (v *NullableRBACIncrementRequest) Set(val *RBACIncrementRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableRBACIncrementRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableRBACIncrementRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRBACIncrementRequest(val *RBACIncrementRequest) *NullableRBACIncrementRequest {
	return &NullableRBACIncrementRequest{value: val, isSet: true}
}

func (v NullableRBACIncrementRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRBACIncrementRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

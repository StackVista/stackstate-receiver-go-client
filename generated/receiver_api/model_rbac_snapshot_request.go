/*
SUSE Observability Receiver API

This API documentation page describes the SUSE Observability receiver API.

API version: 5.2.0
Contact: info@stackstate.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package receiver_api

import (
	"encoding/json"
)

// RBACSnapshotRequest RBACSnapshotRequest holds a complete or partial snapshot of RBAC data
type RBACSnapshotRequest struct {
	Type string `json:"_type"`
	// Timestamp where the data was collected by the RBAC Agent
	CollectionTimestamp int64 `json:"collection_timestamp"`
	// Incremental number for snapshot batches. Helpful to detect incomplete snapshots that could lead to incorrect conclusions.
	Sequence int32 `json:"sequence"`
	// Cluster name which identifies the scope of the RBAC data
	Cluster       string         `json:"cluster"`
	StartSnapshot *StartSnapshot `json:"start_snapshot,omitempty"`
	// Object that signals that an open Snapshot needs to be closed after ingesting the RBAC data
	StopSnapshot map[string]interface{} `json:"stop_snapshot,omitempty"`
	RbacData     []RbacData             `json:"rbac_data"`
}

// NewRBACSnapshotRequest instantiates a new RBACSnapshotRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRBACSnapshotRequest(type_ string, collectionTimestamp int64, sequence int32, cluster string, rbacData []RbacData) *RBACSnapshotRequest {
	this := RBACSnapshotRequest{}
	this.Type = type_
	this.CollectionTimestamp = collectionTimestamp
	this.Sequence = sequence
	this.Cluster = cluster
	this.RbacData = rbacData
	return &this
}

// NewRBACSnapshotRequestWithDefaults instantiates a new RBACSnapshotRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRBACSnapshotRequestWithDefaults() *RBACSnapshotRequest {
	this := RBACSnapshotRequest{}
	return &this
}

// GetType returns the Type field value
func (o *RBACSnapshotRequest) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *RBACSnapshotRequest) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *RBACSnapshotRequest) SetType(v string) {
	o.Type = v
}

// GetCollectionTimestamp returns the CollectionTimestamp field value
func (o *RBACSnapshotRequest) GetCollectionTimestamp() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.CollectionTimestamp
}

// GetCollectionTimestampOk returns a tuple with the CollectionTimestamp field value
// and a boolean to check if the value has been set.
func (o *RBACSnapshotRequest) GetCollectionTimestampOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CollectionTimestamp, true
}

// SetCollectionTimestamp sets field value
func (o *RBACSnapshotRequest) SetCollectionTimestamp(v int64) {
	o.CollectionTimestamp = v
}

// GetSequence returns the Sequence field value
func (o *RBACSnapshotRequest) GetSequence() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Sequence
}

// GetSequenceOk returns a tuple with the Sequence field value
// and a boolean to check if the value has been set.
func (o *RBACSnapshotRequest) GetSequenceOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Sequence, true
}

// SetSequence sets field value
func (o *RBACSnapshotRequest) SetSequence(v int32) {
	o.Sequence = v
}

// GetCluster returns the Cluster field value
func (o *RBACSnapshotRequest) GetCluster() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Cluster
}

// GetClusterOk returns a tuple with the Cluster field value
// and a boolean to check if the value has been set.
func (o *RBACSnapshotRequest) GetClusterOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Cluster, true
}

// SetCluster sets field value
func (o *RBACSnapshotRequest) SetCluster(v string) {
	o.Cluster = v
}

// GetStartSnapshot returns the StartSnapshot field value if set, zero value otherwise.
func (o *RBACSnapshotRequest) GetStartSnapshot() StartSnapshot {
	if o == nil || o.StartSnapshot == nil {
		var ret StartSnapshot
		return ret
	}
	return *o.StartSnapshot
}

// GetStartSnapshotOk returns a tuple with the StartSnapshot field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RBACSnapshotRequest) GetStartSnapshotOk() (*StartSnapshot, bool) {
	if o == nil || o.StartSnapshot == nil {
		return nil, false
	}
	return o.StartSnapshot, true
}

// HasStartSnapshot returns a boolean if a field has been set.
func (o *RBACSnapshotRequest) HasStartSnapshot() bool {
	if o != nil && o.StartSnapshot != nil {
		return true
	}

	return false
}

// SetStartSnapshot gets a reference to the given StartSnapshot and assigns it to the StartSnapshot field.
func (o *RBACSnapshotRequest) SetStartSnapshot(v StartSnapshot) {
	o.StartSnapshot = &v
}

// GetStopSnapshot returns the StopSnapshot field value if set, zero value otherwise.
func (o *RBACSnapshotRequest) GetStopSnapshot() map[string]interface{} {
	if o == nil || o.StopSnapshot == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.StopSnapshot
}

// GetStopSnapshotOk returns a tuple with the StopSnapshot field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RBACSnapshotRequest) GetStopSnapshotOk() (map[string]interface{}, bool) {
	if o == nil || o.StopSnapshot == nil {
		return nil, false
	}
	return o.StopSnapshot, true
}

// HasStopSnapshot returns a boolean if a field has been set.
func (o *RBACSnapshotRequest) HasStopSnapshot() bool {
	if o != nil && o.StopSnapshot != nil {
		return true
	}

	return false
}

// SetStopSnapshot gets a reference to the given map[string]interface{} and assigns it to the StopSnapshot field.
func (o *RBACSnapshotRequest) SetStopSnapshot(v map[string]interface{}) {
	o.StopSnapshot = v
}

// GetRbacData returns the RbacData field value
func (o *RBACSnapshotRequest) GetRbacData() []RbacData {
	if o == nil {
		var ret []RbacData
		return ret
	}

	return o.RbacData
}

// GetRbacDataOk returns a tuple with the RbacData field value
// and a boolean to check if the value has been set.
func (o *RBACSnapshotRequest) GetRbacDataOk() ([]RbacData, bool) {
	if o == nil {
		return nil, false
	}
	return o.RbacData, true
}

// SetRbacData sets field value
func (o *RBACSnapshotRequest) SetRbacData(v []RbacData) {
	o.RbacData = v
}

func (o RBACSnapshotRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["_type"] = o.Type
	}
	if true {
		toSerialize["collection_timestamp"] = o.CollectionTimestamp
	}
	if true {
		toSerialize["sequence"] = o.Sequence
	}
	if true {
		toSerialize["cluster"] = o.Cluster
	}
	if o.StartSnapshot != nil {
		toSerialize["start_snapshot"] = o.StartSnapshot
	}
	if o.StopSnapshot != nil {
		toSerialize["stop_snapshot"] = o.StopSnapshot
	}
	if true {
		toSerialize["rbac_data"] = o.RbacData
	}
	return json.Marshal(toSerialize)
}

type NullableRBACSnapshotRequest struct {
	value *RBACSnapshotRequest
	isSet bool
}

func (v NullableRBACSnapshotRequest) Get() *RBACSnapshotRequest {
	return v.value
}

func (v *NullableRBACSnapshotRequest) Set(val *RBACSnapshotRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableRBACSnapshotRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableRBACSnapshotRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRBACSnapshotRequest(val *RBACSnapshotRequest) *NullableRBACSnapshotRequest {
	return &NullableRBACSnapshotRequest{value: val, isSet: true}
}

func (v NullableRBACSnapshotRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRBACSnapshotRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

/*
SUSE Observability Receiver API

This API documentation page describes the SUSE Observability receiver API.

API version: 5.2.0
Contact: info@stackstate.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package receiver_api

import (
	"encoding/json"
)

// DeleteRbacData Defines a RBAC resource that needs to be delete
type DeleteRbacData struct {
	Type string `json:"_type"`
	// UID of the referent.
	Uid string `json:"uid"`
}

// NewDeleteRbacData instantiates a new DeleteRbacData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeleteRbacData(type_ string, uid string) *DeleteRbacData {
	this := DeleteRbacData{}
	this.Type = type_
	this.Uid = uid
	return &this
}

// NewDeleteRbacDataWithDefaults instantiates a new DeleteRbacData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeleteRbacDataWithDefaults() *DeleteRbacData {
	this := DeleteRbacData{}
	return &this
}

// GetType returns the Type field value
func (o *DeleteRbacData) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *DeleteRbacData) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *DeleteRbacData) SetType(v string) {
	o.Type = v
}

// GetUid returns the Uid field value
func (o *DeleteRbacData) GetUid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Uid
}

// GetUidOk returns a tuple with the Uid field value
// and a boolean to check if the value has been set.
func (o *DeleteRbacData) GetUidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Uid, true
}

// SetUid sets field value
func (o *DeleteRbacData) SetUid(v string) {
	o.Uid = v
}

func (o DeleteRbacData) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["_type"] = o.Type
	}
	if true {
		toSerialize["uid"] = o.Uid
	}
	return json.Marshal(toSerialize)
}

type NullableDeleteRbacData struct {
	value *DeleteRbacData
	isSet bool
}

func (v NullableDeleteRbacData) Get() *DeleteRbacData {
	return v.value
}

func (v *NullableDeleteRbacData) Set(val *DeleteRbacData) {
	v.value = val
	v.isSet = true
}

func (v NullableDeleteRbacData) IsSet() bool {
	return v.isSet
}

func (v *NullableDeleteRbacData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeleteRbacData(val *DeleteRbacData) *NullableDeleteRbacData {
	return &NullableDeleteRbacData{value: val, isSet: true}
}

func (v NullableDeleteRbacData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeleteRbacData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

/*
SUSE Observability Receiver API

This API documentation page describes the SUSE Observability receiver API.

API version: 5.2.0
Contact: info@stackstate.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package receiver_api

import (
	"encoding/json"
)

// RBACResponseError struct for RBACResponseError
type RBACResponseError struct {
	Message string `json:"message"`
	Type    string `json:"_type"`
}

// NewRBACResponseError instantiates a new RBACResponseError object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRBACResponseError(message string, type_ string) *RBACResponseError {
	this := RBACResponseError{}
	this.Message = message
	this.Type = type_
	return &this
}

// NewRBACResponseErrorWithDefaults instantiates a new RBACResponseError object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRBACResponseErrorWithDefaults() *RBACResponseError {
	this := RBACResponseError{}
	return &this
}

// GetMessage returns the Message field value
func (o *RBACResponseError) GetMessage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Message
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
func (o *RBACResponseError) GetMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Message, true
}

// SetMessage sets field value
func (o *RBACResponseError) SetMessage(v string) {
	o.Message = v
}

// GetType returns the Type field value
func (o *RBACResponseError) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *RBACResponseError) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *RBACResponseError) SetType(v string) {
	o.Type = v
}

func (o RBACResponseError) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["message"] = o.Message
	}
	if true {
		toSerialize["_type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableRBACResponseError struct {
	value *RBACResponseError
	isSet bool
}

func (v NullableRBACResponseError) Get() *RBACResponseError {
	return v.value
}

func (v *NullableRBACResponseError) Set(val *RBACResponseError) {
	v.value = val
	v.isSet = true
}

func (v NullableRBACResponseError) IsSet() bool {
	return v.isSet
}

func (v *NullableRBACResponseError) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRBACResponseError(val *RBACResponseError) *NullableRBACResponseError {
	return &NullableRBACResponseError{value: val, isSet: true}
}

func (v NullableRBACResponseError) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRBACResponseError) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

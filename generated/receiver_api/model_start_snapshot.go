/*
SUSE Observability Receiver API

This API documentation page describes the SUSE Observability receiver API.

API version: 5.2.0
Contact: info@stackstate.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package receiver_api

import (
	"encoding/json"
)

// StartSnapshot Object that signals that the RBAC data belongs to a new Snapshot
type StartSnapshot struct {
	// Number of seconds when the RBAC Agent will send the following snapshot. Heartbeat of the Agent
	RepeatIntervalS *int64 `json:"repeat_interval_s,omitempty"`
}

// NewStartSnapshot instantiates a new StartSnapshot object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStartSnapshot() *StartSnapshot {
	this := StartSnapshot{}
	return &this
}

// NewStartSnapshotWithDefaults instantiates a new StartSnapshot object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStartSnapshotWithDefaults() *StartSnapshot {
	this := StartSnapshot{}
	return &this
}

// GetRepeatIntervalS returns the RepeatIntervalS field value if set, zero value otherwise.
func (o *StartSnapshot) GetRepeatIntervalS() int64 {
	if o == nil || o.RepeatIntervalS == nil {
		var ret int64
		return ret
	}
	return *o.RepeatIntervalS
}

// GetRepeatIntervalSOk returns a tuple with the RepeatIntervalS field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StartSnapshot) GetRepeatIntervalSOk() (*int64, bool) {
	if o == nil || o.RepeatIntervalS == nil {
		return nil, false
	}
	return o.RepeatIntervalS, true
}

// HasRepeatIntervalS returns a boolean if a field has been set.
func (o *StartSnapshot) HasRepeatIntervalS() bool {
	if o != nil && o.RepeatIntervalS != nil {
		return true
	}

	return false
}

// SetRepeatIntervalS gets a reference to the given int64 and assigns it to the RepeatIntervalS field.
func (o *StartSnapshot) SetRepeatIntervalS(v int64) {
	o.RepeatIntervalS = &v
}

func (o StartSnapshot) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.RepeatIntervalS != nil {
		toSerialize["repeat_interval_s"] = o.RepeatIntervalS
	}
	return json.Marshal(toSerialize)
}

type NullableStartSnapshot struct {
	value *StartSnapshot
	isSet bool
}

func (v NullableStartSnapshot) Get() *StartSnapshot {
	return v.value
}

func (v *NullableStartSnapshot) Set(val *StartSnapshot) {
	v.value = val
	v.isSet = true
}

func (v NullableStartSnapshot) IsSet() bool {
	return v.isSet
}

func (v *NullableStartSnapshot) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStartSnapshot(val *StartSnapshot) *NullableStartSnapshot {
	return &NullableStartSnapshot{value: val, isSet: true}
}

func (v NullableStartSnapshot) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStartSnapshot) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

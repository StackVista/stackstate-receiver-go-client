/*
SUSE Observability Receiver API

This API documentation page describes the SUSE Observability receiver API.

API version: 5.2.0
Contact: info@stackstate.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package receiver_api

import (
	"encoding/json"
	"fmt"
)

// RbacDataChanges - struct for RbacDataChanges
type RbacDataChanges struct {
	CreateRbacData *CreateRbacData
	DeleteRbacData *DeleteRbacData
	UpdateRbacData *UpdateRbacData
}

// CreateRbacDataAsRbacDataChanges is a convenience function that returns CreateRbacData wrapped in RbacDataChanges
func CreateRbacDataAsRbacDataChanges(v *CreateRbacData) RbacDataChanges {
	return RbacDataChanges{
		CreateRbacData: v,
	}
}

// DeleteRbacDataAsRbacDataChanges is a convenience function that returns DeleteRbacData wrapped in RbacDataChanges
func DeleteRbacDataAsRbacDataChanges(v *DeleteRbacData) RbacDataChanges {
	return RbacDataChanges{
		DeleteRbacData: v,
	}
}

// UpdateRbacDataAsRbacDataChanges is a convenience function that returns UpdateRbacData wrapped in RbacDataChanges
func UpdateRbacDataAsRbacDataChanges(v *UpdateRbacData) RbacDataChanges {
	return RbacDataChanges{
		UpdateRbacData: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *RbacDataChanges) UnmarshalJSON(data []byte) error {
	var err error
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err = newStrictDecoder(data).Decode(&jsonDict)
	if err != nil {
		return fmt.Errorf("Failed to unmarshal JSON into map for the discriminator lookup.")
	}

	// check if the discriminator value is 'CreateRbacData'
	if jsonDict["_type"] == "CreateRbacData" {
		// try to unmarshal JSON data into CreateRbacData
		err = json.Unmarshal(data, &dst.CreateRbacData)
		if err == nil {
			return nil // data stored in dst.CreateRbacData, return on the first match
		} else {
			dst.CreateRbacData = nil
			return fmt.Errorf("Failed to unmarshal RbacDataChanges as CreateRbacData: %s", err.Error())
		}
	}

	// check if the discriminator value is 'DeleteRbacData'
	if jsonDict["_type"] == "DeleteRbacData" {
		// try to unmarshal JSON data into DeleteRbacData
		err = json.Unmarshal(data, &dst.DeleteRbacData)
		if err == nil {
			return nil // data stored in dst.DeleteRbacData, return on the first match
		} else {
			dst.DeleteRbacData = nil
			return fmt.Errorf("Failed to unmarshal RbacDataChanges as DeleteRbacData: %s", err.Error())
		}
	}

	// check if the discriminator value is 'UpdateRbacData'
	if jsonDict["_type"] == "UpdateRbacData" {
		// try to unmarshal JSON data into UpdateRbacData
		err = json.Unmarshal(data, &dst.UpdateRbacData)
		if err == nil {
			return nil // data stored in dst.UpdateRbacData, return on the first match
		} else {
			dst.UpdateRbacData = nil
			return fmt.Errorf("Failed to unmarshal RbacDataChanges as UpdateRbacData: %s", err.Error())
		}
	}

	return nil
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src RbacDataChanges) MarshalJSON() ([]byte, error) {
	if src.CreateRbacData != nil {
		return json.Marshal(&src.CreateRbacData)
	}

	if src.DeleteRbacData != nil {
		return json.Marshal(&src.DeleteRbacData)
	}

	if src.UpdateRbacData != nil {
		return json.Marshal(&src.UpdateRbacData)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *RbacDataChanges) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.CreateRbacData != nil {
		return obj.CreateRbacData
	}

	if obj.DeleteRbacData != nil {
		return obj.DeleteRbacData
	}

	if obj.UpdateRbacData != nil {
		return obj.UpdateRbacData
	}

	// all schemas are nil
	return nil
}

type NullableRbacDataChanges struct {
	value *RbacDataChanges
	isSet bool
}

func (v NullableRbacDataChanges) Get() *RbacDataChanges {
	return v.value
}

func (v *NullableRbacDataChanges) Set(val *RbacDataChanges) {
	v.value = val
	v.isSet = true
}

func (v NullableRbacDataChanges) IsSet() bool {
	return v.isSet
}

func (v *NullableRbacDataChanges) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRbacDataChanges(val *RbacDataChanges) *NullableRbacDataChanges {
	return &NullableRbacDataChanges{value: val, isSet: true}
}

func (v NullableRbacDataChanges) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRbacDataChanges) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

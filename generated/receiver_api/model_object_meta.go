/*
SUSE Observability Receiver API

This API documentation page describes the SUSE Observability receiver API.

API version: 5.2.0
Contact: info@stackstate.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package receiver_api

import (
	"encoding/json"
	"time"
)

// ObjectMeta ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
type ObjectMeta struct {
	// Unique identifier for this object. Populated by the system.
	Uid string `json:"uid"`
	// Unique name within a namespace. Required for resource creation.
	Name string `json:"name"`
	// Annotations is an unstructured key-value map stored with a resource that may be set by external tools. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations
	Annotations *map[string]string `json:"annotations,omitempty"`
	// Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.
	CreationTimestamp *time.Time `json:"creationTimestamp,omitempty"`
	// Number of seconds allowed for this object to gracefully terminate before removal.
	DeletionGracePeriodSeconds *int64 `json:"deletionGracePeriodSeconds,omitempty"`
	// Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.
	DeletionTimestamp *time.Time `json:"deletionTimestamp,omitempty"`
	// Must be empty before deletion.
	Finalizers []string `json:"finalizers,omitempty"`
	// Optional prefix for generating a unique name.
	GenerateName *string `json:"generateName,omitempty"`
	// A sequence number representing a specific generation of the desired state.
	Generation *int64 `json:"generation,omitempty"`
	// Map of string keys and values used to organize and categorize objects.
	Labels *map[string]string `json:"labels,omitempty"`
	// Maps workflow-id and version to the set of fields managed by that workflow.
	ManagedFields []ManagedFieldsEntry `json:"managedFields,omitempty"`
	// Defines the space within which each name must be unique.
	Namespace *string `json:"namespace,omitempty"`
	// List of objects depended by this object.
	OwnerReferences []OwnerReference `json:"ownerReferences,omitempty"`
	// Opaque value representing the internal version of this object.
	ResourceVersion *string `json:"resourceVersion,omitempty"`
}

// NewObjectMeta instantiates a new ObjectMeta object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewObjectMeta(uid string, name string) *ObjectMeta {
	this := ObjectMeta{}
	this.Uid = uid
	this.Name = name
	return &this
}

// NewObjectMetaWithDefaults instantiates a new ObjectMeta object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewObjectMetaWithDefaults() *ObjectMeta {
	this := ObjectMeta{}
	return &this
}

// GetUid returns the Uid field value
func (o *ObjectMeta) GetUid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Uid
}

// GetUidOk returns a tuple with the Uid field value
// and a boolean to check if the value has been set.
func (o *ObjectMeta) GetUidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Uid, true
}

// SetUid sets field value
func (o *ObjectMeta) SetUid(v string) {
	o.Uid = v
}

// GetName returns the Name field value
func (o *ObjectMeta) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ObjectMeta) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ObjectMeta) SetName(v string) {
	o.Name = v
}

// GetAnnotations returns the Annotations field value if set, zero value otherwise.
func (o *ObjectMeta) GetAnnotations() map[string]string {
	if o == nil || o.Annotations == nil {
		var ret map[string]string
		return ret
	}
	return *o.Annotations
}

// GetAnnotationsOk returns a tuple with the Annotations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectMeta) GetAnnotationsOk() (*map[string]string, bool) {
	if o == nil || o.Annotations == nil {
		return nil, false
	}
	return o.Annotations, true
}

// HasAnnotations returns a boolean if a field has been set.
func (o *ObjectMeta) HasAnnotations() bool {
	if o != nil && o.Annotations != nil {
		return true
	}

	return false
}

// SetAnnotations gets a reference to the given map[string]string and assigns it to the Annotations field.
func (o *ObjectMeta) SetAnnotations(v map[string]string) {
	o.Annotations = &v
}

// GetCreationTimestamp returns the CreationTimestamp field value if set, zero value otherwise.
func (o *ObjectMeta) GetCreationTimestamp() time.Time {
	if o == nil || o.CreationTimestamp == nil {
		var ret time.Time
		return ret
	}
	return *o.CreationTimestamp
}

// GetCreationTimestampOk returns a tuple with the CreationTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectMeta) GetCreationTimestampOk() (*time.Time, bool) {
	if o == nil || o.CreationTimestamp == nil {
		return nil, false
	}
	return o.CreationTimestamp, true
}

// HasCreationTimestamp returns a boolean if a field has been set.
func (o *ObjectMeta) HasCreationTimestamp() bool {
	if o != nil && o.CreationTimestamp != nil {
		return true
	}

	return false
}

// SetCreationTimestamp gets a reference to the given time.Time and assigns it to the CreationTimestamp field.
func (o *ObjectMeta) SetCreationTimestamp(v time.Time) {
	o.CreationTimestamp = &v
}

// GetDeletionGracePeriodSeconds returns the DeletionGracePeriodSeconds field value if set, zero value otherwise.
func (o *ObjectMeta) GetDeletionGracePeriodSeconds() int64 {
	if o == nil || o.DeletionGracePeriodSeconds == nil {
		var ret int64
		return ret
	}
	return *o.DeletionGracePeriodSeconds
}

// GetDeletionGracePeriodSecondsOk returns a tuple with the DeletionGracePeriodSeconds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectMeta) GetDeletionGracePeriodSecondsOk() (*int64, bool) {
	if o == nil || o.DeletionGracePeriodSeconds == nil {
		return nil, false
	}
	return o.DeletionGracePeriodSeconds, true
}

// HasDeletionGracePeriodSeconds returns a boolean if a field has been set.
func (o *ObjectMeta) HasDeletionGracePeriodSeconds() bool {
	if o != nil && o.DeletionGracePeriodSeconds != nil {
		return true
	}

	return false
}

// SetDeletionGracePeriodSeconds gets a reference to the given int64 and assigns it to the DeletionGracePeriodSeconds field.
func (o *ObjectMeta) SetDeletionGracePeriodSeconds(v int64) {
	o.DeletionGracePeriodSeconds = &v
}

// GetDeletionTimestamp returns the DeletionTimestamp field value if set, zero value otherwise.
func (o *ObjectMeta) GetDeletionTimestamp() time.Time {
	if o == nil || o.DeletionTimestamp == nil {
		var ret time.Time
		return ret
	}
	return *o.DeletionTimestamp
}

// GetDeletionTimestampOk returns a tuple with the DeletionTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectMeta) GetDeletionTimestampOk() (*time.Time, bool) {
	if o == nil || o.DeletionTimestamp == nil {
		return nil, false
	}
	return o.DeletionTimestamp, true
}

// HasDeletionTimestamp returns a boolean if a field has been set.
func (o *ObjectMeta) HasDeletionTimestamp() bool {
	if o != nil && o.DeletionTimestamp != nil {
		return true
	}

	return false
}

// SetDeletionTimestamp gets a reference to the given time.Time and assigns it to the DeletionTimestamp field.
func (o *ObjectMeta) SetDeletionTimestamp(v time.Time) {
	o.DeletionTimestamp = &v
}

// GetFinalizers returns the Finalizers field value if set, zero value otherwise.
func (o *ObjectMeta) GetFinalizers() []string {
	if o == nil || o.Finalizers == nil {
		var ret []string
		return ret
	}
	return o.Finalizers
}

// GetFinalizersOk returns a tuple with the Finalizers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectMeta) GetFinalizersOk() ([]string, bool) {
	if o == nil || o.Finalizers == nil {
		return nil, false
	}
	return o.Finalizers, true
}

// HasFinalizers returns a boolean if a field has been set.
func (o *ObjectMeta) HasFinalizers() bool {
	if o != nil && o.Finalizers != nil {
		return true
	}

	return false
}

// SetFinalizers gets a reference to the given []string and assigns it to the Finalizers field.
func (o *ObjectMeta) SetFinalizers(v []string) {
	o.Finalizers = v
}

// GetGenerateName returns the GenerateName field value if set, zero value otherwise.
func (o *ObjectMeta) GetGenerateName() string {
	if o == nil || o.GenerateName == nil {
		var ret string
		return ret
	}
	return *o.GenerateName
}

// GetGenerateNameOk returns a tuple with the GenerateName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectMeta) GetGenerateNameOk() (*string, bool) {
	if o == nil || o.GenerateName == nil {
		return nil, false
	}
	return o.GenerateName, true
}

// HasGenerateName returns a boolean if a field has been set.
func (o *ObjectMeta) HasGenerateName() bool {
	if o != nil && o.GenerateName != nil {
		return true
	}

	return false
}

// SetGenerateName gets a reference to the given string and assigns it to the GenerateName field.
func (o *ObjectMeta) SetGenerateName(v string) {
	o.GenerateName = &v
}

// GetGeneration returns the Generation field value if set, zero value otherwise.
func (o *ObjectMeta) GetGeneration() int64 {
	if o == nil || o.Generation == nil {
		var ret int64
		return ret
	}
	return *o.Generation
}

// GetGenerationOk returns a tuple with the Generation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectMeta) GetGenerationOk() (*int64, bool) {
	if o == nil || o.Generation == nil {
		return nil, false
	}
	return o.Generation, true
}

// HasGeneration returns a boolean if a field has been set.
func (o *ObjectMeta) HasGeneration() bool {
	if o != nil && o.Generation != nil {
		return true
	}

	return false
}

// SetGeneration gets a reference to the given int64 and assigns it to the Generation field.
func (o *ObjectMeta) SetGeneration(v int64) {
	o.Generation = &v
}

// GetLabels returns the Labels field value if set, zero value otherwise.
func (o *ObjectMeta) GetLabels() map[string]string {
	if o == nil || o.Labels == nil {
		var ret map[string]string
		return ret
	}
	return *o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectMeta) GetLabelsOk() (*map[string]string, bool) {
	if o == nil || o.Labels == nil {
		return nil, false
	}
	return o.Labels, true
}

// HasLabels returns a boolean if a field has been set.
func (o *ObjectMeta) HasLabels() bool {
	if o != nil && o.Labels != nil {
		return true
	}

	return false
}

// SetLabels gets a reference to the given map[string]string and assigns it to the Labels field.
func (o *ObjectMeta) SetLabels(v map[string]string) {
	o.Labels = &v
}

// GetManagedFields returns the ManagedFields field value if set, zero value otherwise.
func (o *ObjectMeta) GetManagedFields() []ManagedFieldsEntry {
	if o == nil || o.ManagedFields == nil {
		var ret []ManagedFieldsEntry
		return ret
	}
	return o.ManagedFields
}

// GetManagedFieldsOk returns a tuple with the ManagedFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectMeta) GetManagedFieldsOk() ([]ManagedFieldsEntry, bool) {
	if o == nil || o.ManagedFields == nil {
		return nil, false
	}
	return o.ManagedFields, true
}

// HasManagedFields returns a boolean if a field has been set.
func (o *ObjectMeta) HasManagedFields() bool {
	if o != nil && o.ManagedFields != nil {
		return true
	}

	return false
}

// SetManagedFields gets a reference to the given []ManagedFieldsEntry and assigns it to the ManagedFields field.
func (o *ObjectMeta) SetManagedFields(v []ManagedFieldsEntry) {
	o.ManagedFields = v
}

// GetNamespace returns the Namespace field value if set, zero value otherwise.
func (o *ObjectMeta) GetNamespace() string {
	if o == nil || o.Namespace == nil {
		var ret string
		return ret
	}
	return *o.Namespace
}

// GetNamespaceOk returns a tuple with the Namespace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectMeta) GetNamespaceOk() (*string, bool) {
	if o == nil || o.Namespace == nil {
		return nil, false
	}
	return o.Namespace, true
}

// HasNamespace returns a boolean if a field has been set.
func (o *ObjectMeta) HasNamespace() bool {
	if o != nil && o.Namespace != nil {
		return true
	}

	return false
}

// SetNamespace gets a reference to the given string and assigns it to the Namespace field.
func (o *ObjectMeta) SetNamespace(v string) {
	o.Namespace = &v
}

// GetOwnerReferences returns the OwnerReferences field value if set, zero value otherwise.
func (o *ObjectMeta) GetOwnerReferences() []OwnerReference {
	if o == nil || o.OwnerReferences == nil {
		var ret []OwnerReference
		return ret
	}
	return o.OwnerReferences
}

// GetOwnerReferencesOk returns a tuple with the OwnerReferences field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectMeta) GetOwnerReferencesOk() ([]OwnerReference, bool) {
	if o == nil || o.OwnerReferences == nil {
		return nil, false
	}
	return o.OwnerReferences, true
}

// HasOwnerReferences returns a boolean if a field has been set.
func (o *ObjectMeta) HasOwnerReferences() bool {
	if o != nil && o.OwnerReferences != nil {
		return true
	}

	return false
}

// SetOwnerReferences gets a reference to the given []OwnerReference and assigns it to the OwnerReferences field.
func (o *ObjectMeta) SetOwnerReferences(v []OwnerReference) {
	o.OwnerReferences = v
}

// GetResourceVersion returns the ResourceVersion field value if set, zero value otherwise.
func (o *ObjectMeta) GetResourceVersion() string {
	if o == nil || o.ResourceVersion == nil {
		var ret string
		return ret
	}
	return *o.ResourceVersion
}

// GetResourceVersionOk returns a tuple with the ResourceVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectMeta) GetResourceVersionOk() (*string, bool) {
	if o == nil || o.ResourceVersion == nil {
		return nil, false
	}
	return o.ResourceVersion, true
}

// HasResourceVersion returns a boolean if a field has been set.
func (o *ObjectMeta) HasResourceVersion() bool {
	if o != nil && o.ResourceVersion != nil {
		return true
	}

	return false
}

// SetResourceVersion gets a reference to the given string and assigns it to the ResourceVersion field.
func (o *ObjectMeta) SetResourceVersion(v string) {
	o.ResourceVersion = &v
}

func (o ObjectMeta) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["uid"] = o.Uid
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if o.Annotations != nil {
		toSerialize["annotations"] = o.Annotations
	}
	if o.CreationTimestamp != nil {
		toSerialize["creationTimestamp"] = o.CreationTimestamp
	}
	if o.DeletionGracePeriodSeconds != nil {
		toSerialize["deletionGracePeriodSeconds"] = o.DeletionGracePeriodSeconds
	}
	if o.DeletionTimestamp != nil {
		toSerialize["deletionTimestamp"] = o.DeletionTimestamp
	}
	if o.Finalizers != nil {
		toSerialize["finalizers"] = o.Finalizers
	}
	if o.GenerateName != nil {
		toSerialize["generateName"] = o.GenerateName
	}
	if o.Generation != nil {
		toSerialize["generation"] = o.Generation
	}
	if o.Labels != nil {
		toSerialize["labels"] = o.Labels
	}
	if o.ManagedFields != nil {
		toSerialize["managedFields"] = o.ManagedFields
	}
	if o.Namespace != nil {
		toSerialize["namespace"] = o.Namespace
	}
	if o.OwnerReferences != nil {
		toSerialize["ownerReferences"] = o.OwnerReferences
	}
	if o.ResourceVersion != nil {
		toSerialize["resourceVersion"] = o.ResourceVersion
	}
	return json.Marshal(toSerialize)
}

type NullableObjectMeta struct {
	value *ObjectMeta
	isSet bool
}

func (v NullableObjectMeta) Get() *ObjectMeta {
	return v.value
}

func (v *NullableObjectMeta) Set(val *ObjectMeta) {
	v.value = val
	v.isSet = true
}

func (v NullableObjectMeta) IsSet() bool {
	return v.isSet
}

func (v *NullableObjectMeta) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableObjectMeta(val *ObjectMeta) *NullableObjectMeta {
	return &NullableObjectMeta{value: val, isSet: true}
}

func (v NullableObjectMeta) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableObjectMeta) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
